Relational DB support ACID transactional consistercy:
Атомарност - ако 1 операция/транзакция не мине, не минават всички. (Важно заради релациите) Нямаме паразитни записи. 
Т.е. Всички операции в 1 транзакция трябва да приключат успешно, за да приключи успешно транзакцията и да се приложи върху базата данни. 

Консистентност - когато 1 транзакция бъде изпълнена върху базата данни и ако остават ненужни записи / изтриваме запис, който е необходим, нарушаваме
консистентността на базата данни. Транзакцията ще fail-не и базата ще остане във валидно състояние.

Изолация -  в 1 и също време се изпъняват транзакции върху базата, така да се изолират тези транзакции, че да се гарантира целостта на базата данни.
Има различни нива на изолация.

Durability - когато 1 транзакция е приключила успешно, тя трябва да бъде съхранена в базата данни без значение от външни фактори. (ще спре ли тока...)
Commit-а на всяка транзакция води до енергонезависима/сигурна памет.

-----------------------------------------------------------------------------------------------------------------------------------------------------------

Relational DB support "joins". - за извличане на информация от различни таблици

При добавяне на нови данни в таблица (създаване на нов индекс) трябва всички индекси да се преизчислят наново - rebuild-ване.

Scale - да промениш ресурсите си така, че да поемеш по-малкото или по-голямото натоварване (scale out - разтеж/ scale in)

Релационните бази данни не могат да скалират хоризонтално.

Вертикално скалиране - добавяне на ресурс към конкретния сървър. (ако нямаме памет...)

Нерелационните бази лесно скалират хоризонтално. Хващаме още 1 сървър и го включваме. (не даваме ресурси на конкретната машина, а просто добавяме още
1 машина/сървъри.
Нерелационните бази имат неструктуриране данни (json документ) или полуструктурирани. Нямат схема (но могат да имат при четене/сериализиране - отвън).

В релационните бази трябва обектния модел в кода да съвпадне с този в базата данни. При нерелационните трябва обектния модел в кода да съвпадне със 
стръктурата на данните, но не със някакъв модел в самата база данни.

Ако при нерелационните бази нещо се случи с главния сървър (мастер, през който трябва да става писането на информация в базата) и той отпадне от клъстера
другите избират нов мастер.

------------
Backend As a Service - да улесни разработчиците / повече хора да правят приложения

Types:
1) Cloud BaaS
2) Opensource BaaS

--------------------
Firebase - real-time cloud DB

--------------
ORM - Object Relationship Mapper
SDK - дава методи за работа с firebase/ kinvey
Индексите са двоични дървета за търсене.








