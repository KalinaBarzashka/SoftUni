Промисите са механизмът, с който се осигурява асинхронното програмиране.
Asynx/Await - pattern, едно и също като промисите, но е синтаксис sugar върху промисите.
 ES2017
JS is single threaded language. Stack - Event queue - Stack... се осъществява асинхронност +
използването на callback функции.
Промисът е обект, който представлява евентуалното завършване или провал на някаква асинхронна
операция. Има конструкор функция.
Промиса трябва да resolv-не или reject-не, за да влезе в event queue-то.
Връшщането на резултат resolve-a новия промис, а хвърлянето на грешка го reject-ва.
fetch is API that returns promise. (only for AJAX querys)
Промиса на fetch-a влиза в catch-a, само когато няма връзка с мрежата. Тоест винаги влиза в
then и е хубаво да хвърляме грешка (заради например 404).
Примиса има вградени функции resolve and reject(data) - с data влиза в catch
rejectionhandled - is there is no catch
unhandledrejection
Как да си скрием грешката от конзолата - prevent default

Async / Await
Await само в асинхронни функции
За да е 1 функция асинхронна трябва да си използва ключовата дума async. Тя връща promise.
Асинхронните функции използват евент loop-a. Съдържат expression с ключовата дума await.
Await спира изпълнението на асинхронната функция и чака промиса да бъде resolve-нат.
Това не блокира основния тред, работи през еvent опашката.
Await се слага пред асинхронни функции, които връщат промис.